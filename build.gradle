import org.gradle.api.tasks.Exec

defaultTasks 'bower'

version "0.3"
group "uk.co.mdc.modelcatalogue"

apply plugin: "grails"

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:2.0.0"
    }
}

repositories {
    grails.central() //creates a maven repo for the Grails Central repository (Core libraries and plugins)
    maven { url "http://repo.grails.org/grails/core" }
    maven { url "http://repo.grails.org/grails/plugins" }
    maven { url "http://download.java.net/maven/2/" }
    maven { url 'http://maven.restlet.org' }
    maven { url 'http://repo.spring.io/milestone' }
    mavenLocal()
}

grails {
    grailsVersion = '2.3.5'
    //groovyVersion = '2.1.9'
    //springLoadedVersion '1.1.3'
}

dependencies {
    bootstrap "org.grails.plugins:tomcat:7.0.50" // No container is deployed by default, so add this

    compile "org.grails.plugins:spring-security-ui:0.2"
    compile 'org.grails.plugins:spring-security-core:1.2.7.3'
    compile "org.grails.plugins:spring-security-acl:1.1.1"

    compile "org.grails.plugins:audit-logging:0.5.5.3"
    compile "org.grails.plugins:jquery-ui:1.10.3"
    compile "org.grails.plugins:famfamfam:1.0.1"

    compile 'org.grails.plugins:cache:1.0.1'
    compile 'org.grails.plugins:mail:1.0.1', {
        //excludes 'spring-test'
    }

    def webDriverVersion = "2.39.0"
    test "org.grails.plugins:geb:0.9.2"
    test "org.gebish:geb-spock:0.9.2"
    test "org.seleniumhq.selenium:selenium-support:${webDriverVersion}"
    test "org.seleniumhq.selenium:selenium-firefox-driver:${webDriverVersion}"
    test "org.seleniumhq.selenium:selenium-chrome-driver:${webDriverVersion}"
    test "org.seleniumhq.selenium:selenium-remote-driver:${webDriverVersion}"

//    // Required because of bug in 2.37.0 of WebDriver:
//    test "org.apache.httpcomponents:httpclient:4.3.1"
    test("org.seleniumhq.selenium:selenium-htmlunit-driver:${webDriverVersion}") {
        exclude module: 'xml-apis'
    }

    // Uncomment these (or add new ones) to enable additional resources capabilities
    //runtime ":zipped-resources:1.0"
    //runtime ":cached-resources:1.0"
    runtime "org.grails.plugins:database-migration:1.3.7"
    runtime "org.grails.plugins:hibernate:3.6.10.6"
    runtime "org.grails.plugins:jquery:1.8.3"
    runtime "org.grails.plugins:resources:1.1.6"

    compile "org.grails.plugins:coffee-asset-pipeline:1.5.0"
    compile "org.grails.plugins:less-asset-pipeline:1.5.0"

    // The following are dead, we shouldn't use them!
    compile "org.grails.plugins:csv:0.3.1"

    compile 'com.googlecode.json-simple:json-simple:1.1.1'

    runtime 'mysql:mysql-connector-java:5.1.22'
}

// Get the path for the locally installed binaries
task npmBin << {
    new ByteArrayOutputStream().withStream { os ->
        def result = exec {
            executable = 'npm'
            args = ['bin']
            standardOutput = os
        }
        ext.binPath = os.toString().trim() + "/"
    }
}

// Install packages from package.json
task npm(type: Exec) {
    group = "Build"
    description = "Installs all Node.js dependencies defined in package.json"
    commandLine = ["npm", "install"]
    inputs.file "package.json"
    outputs.dir "node_modules"

    tasks.npmBin.execute()

}

// Install the bower components for front-end library management
task bower(dependsOn: 'npm', type: Exec) {
    commandLine "${npmBin.binPath}bower", 'install'
}


check.dependsOn bower

// Hack to give enough memory to Grails even though it's in a forked VM - this should be fixed in Grails soon
tasks.withType(org.grails.gradle.plugin.tasks.GrailsTask) { Task t ->
    t.jvmOptions {
        jvmArgs "-Xmx384m", "-XX:MaxPermSize=256m"
    }
}